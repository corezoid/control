# Default values for control.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # second level domain only! / core domain (example: control.local)
  domain: "control.local"
  serviceMonitor:
    enabled: false
  # Dashboard configuration for deploying Grafana dashboards for Control
  dashboards:
    # -- If enabled, Grafana dashboards are deployed
    enabled: false
    # -- Annotations to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, annotation should be provided to place dashboards in proper folder.
    # From observability chart, value from grafana.sidecar.dashboards.folderAnnotation is a
    # "key" for annotation, and value is a name of folder which will be created in Grafana UI for Control dashboards.
    annotations: {}
    # -- Labels to add to the Grafana dashboard ConfigMap
    # Note: If using with middleware observability platform, labels should be provided to discovery
    # dashboards and upload them to grafana. From observability chart, value from grafana.sidecar.dashboards.label is a key,
    # and grafana.sidecar.dashboards.labelValue is a value for that label.
    # So, label should looks like grafana.sidecar.dashboards.label:grafana.sidecar.dashboards.labelValue
    labels: {}
  # Alert rules configuration for deploying Prometheus alert rules for Control
  alerts:
    # -- If enabled, Prometheus alert rules are deployed
    enabled: false
    # -- Labels to add to the PrometheusRule custom resource
    # Note: If using with Prometheus Operator, the rule should be discovered by Prometheus
    labels: {}
  #######  PostgreSQL  ########
  ## for RDS minimum instance - db.t3.medium / master user set "postgres"
  db:
    image: "postgres:13.7-alpine"
    imagePullPolicy: "IfNotPresent"
    # if internal true - create and use internal postgres container
    # if internal false - enable external db, like aws rds
    internal: true
    ## secret configuration for postgresql
    create: true
    ## pvc name
    persistantVolumeClaimName: "postgresql-pvc"
    secret:
      ## true - secret will be created automaticaly with provided values
      ## false - secret should be created manualy
      create: true
      ## secret name
      name: "postgresql-secret"
      ## for init db and roles dbsuperuser and dbuser cannot be changed (because used as plain text in sql)
      dbsuperuser: "master"
      ## password - for dbsuperuser
      dbsuperuserpwd: "password"
      data:
        dbname: "control"
        dbhost: "postgres"
        dbport: "5432"
        dbuser: "dbuser"
        dbpwd: "dbpwd"
        # sslmode: "require"
    # Set false to disable if you don't want to use PGBouncer, recommended - true
    # If true, will create pod with PGBouncer
    bouncer: false
    bouncer_port: 5432
    bouncer_minReplicas: 1
    bouncer_maxReplicas: 6
    bouncer_resources:
      limits:
        cpu: "500m"
        memory: "500Mi"
      requests:
        cpu: "100m"
        memory: "100Mi"
    bouncer_log_level: debug
    # Maximum number of client connections allowed.
    maxclientconn: "100000"
    # How many server connections to allow per user/database pair. Can be overridden in the per-database configuration.
    default_pool_size: "5000"
    # Server is released back to pool after transaction finishes. default: session, see man https://wiki.postgresql.org/wiki/PgBouncer
    # transaction | session
    default_pool_mode: transaction
  ## NO CLUSTER Mode!
  redis:
    # if internal true - create and use internal k8s redis container
    # if internal false - enable external redis, like aws elasticache (Engine Version Compatibility: 3.2.10)
    internal: true
    ## pvc name if it already exist or was created manualy
    persistantVolumeClaimName: "redis-pvc"
    ## secret configuration for redis
    sentinel:
      enable: false
      master_name: "mymaster"
#     cluster:
#       enable: false
#       nodes:
#         - host: "redis-cluster-0.redis-cluster"
#           port: "6379"
#         - host: "redis-cluster-1.redis-cluster"
#           port: "6379"
#         - host: "redis-cluster-2.redis-cluster"
#           port: "6379"
    secret:
      ## true - secret will be created automatically with provided values
      ## false - secret should be created manually
      create: true
      name: "redis-secret"
      # you can specify different servers for redis for cache and PubSub  - or specify the same server in variables
      data:
        host: "redis-master"
        port: "6379"
        password: ""
        # default redis for PubSub
        host_PubSub: "redis-master"
        port_PubSub: "6379"
        password_PubSub: ""
  ###########################################
  ######## Settings for filesystems #########
  # Define global storage class: efs / nfs / manual
  storage: efs
  # Define global storageClass name
  storageClassName: "control-storage-class-public"
  persistantVolumeClaimCreate: true
  ######## Settings AWS EFS filesystem   ########
  efs:
    # Set AWS region
    awsRegion: "eu-west-1"
    # Set EFS id
    efsFileSystemId: "fs-07465fb09693c837f"
    ## set true if you choose storage: efs
    enabled: true
  ######## Settings NFS filesystem   ########
  nfs:
    ## set true if you choose storage: nfs
    enabled: false
  imageRegistry: "hub.corezoid.com"
  repotype: "public"
  imageInit:
    repository: hub.corezoid.com/hub.docker.com/library/alpine
    pullPolicy: IfNotPresent
    tag: "3.20"
  deploymentStrategy:
    type: RollingUpdate
  networkPolicy:
    enabled: false
    monitoring:
      # Selector for prometheus namespace
      namespaceSelector:
        name: monitoring
      # Selector for prometheus deploymnets
      podSelector:
        release: prometheus-stack
  nameOverride: ""
  fullnameOverride: ""
  control:
    product: "control"
    scylladb:
      # if internal true - create and use internal ScyllaDB
      # if internal false - enable external server with ScyllaDB
      internal: false
      # if internal false - must be a list of external server or servers with ScyllaDB
      contactPoints: [SCYLLADB_HOST]
      localDataCenter: eu-west
      # Kayspace name
      keyspace: simulator
    # Applications ports
    serverPort: 9000
    realtimePort: 9005
    frontendPort: 80
    widgetPort: 80
    apiVersion: '1.0'
    # Secret for submitting requests between Control applications.
    apiSecret: "sRk5FM;T(]WbUuFeP8)[f2p[cH9:+)Qm"
    browserExtensionsSecret: "IeV0j4i8ewSDT!FETZ@%69nDiiJ$BKmBCOVq!#%Q"
    googleApiKey: "AIzaSyA36Bi3n5IiQjGiXEGL4pxW0piqGp4nvOs"
    # Superadmin API key
    superAdminApiKey: "P8NTWrKT2fkRjRKNyAm2QjYJa3nxnzhb9xqDxjVx"
    # CSP setup (advanced)
    content_security_policy:
      urls:
        # - https://doc.corezoid.com
    # Supported localizations
    locales:
      - en
    # Time zone from which time is calculated in notification letters.
    timeZone: 2
    session:
      ttl: "2592000"
      cookieName: "sc_prod"
    requestLimits:
      ip: -1
    # Schema of simulator domain: http|https (default: https)
    protocol: https
    # Skip or not ssl certificate verify: true|false (default: false)
    insecure_skip_verify: false
    auth:
      # Auth settings via Single Account
      disablePublicApiCheck: true
      # Name of client in Single Account
      name: "control-auth-name-public"
      key: "aogeungoh3mohM3valu6Zu1ohdiighie1EemoophaequohMoovuanoJ3OhguKeiG"
      domain: "account.corezoid.local"

    # Sub-domain for Control
    controlSubDomain: "control"
    # Domain for API Corezoid
    adminCorezoidDomain: "admin.corezoid.local"
    apiCorezoidDomain: "dev.corezoid.local"
    # Sub-domain for Control Widget
    widgetSubDomain: "widget"

    # connectors:
    #   # SyncApi API login
    #   apiLogin: 123456
    #   # SyncApi API secret
    #   apiSecret: "lnNhDfAWxCp6N1m7yLtiMtnCqhgkfsWSDau15WXGFv7xoaPiir"
    #   convId: 54321
    #   syncApiUrl: "https://sync-api.corezoid.local"
    corezoidSyncApiUrl: "https://sync-api.corezoid.local"
    corezoid:
      companyId: "i123456789"
      apiSecret: "12345"
      processes:
        sendEmail:
          directUrl: "https://corezoid.local/api/1/json/public/111/ve67clroyo9teicrapbvorrb1unqf2npmnjx4u2b"
          convId: 111
        botNotifications:
          directUrl: "https://corezoid.local/api/1/json/public/222/o5grwe74qlxh75z51dmkdnkmpjzs09lnbitmzwrp"
          convId: 222
        accRegistrations:
          directUrl: "https://corezoid.local/api/1/json/public/333/s1cl3amvf2jz9bcb271szxkuarroezrcgfzppovh"
          convId: 333
    filesStorage:
      eventFiles: "/ebsmnt/attachments"
#       type: "s3" # AWS S3 or AWS EFS
#       region: "eu-west-1"
#       bucket: "mw-dev-control-2-storage" # for AWS S3
#       efsFileSystemId: fs-0aaa210ad904c3991   # for AWS EFS
    webConfig:
      supportEmail: ''
      maxFileSize: '26214400'
    channels:
      gmail:
        clientId: "290516331007-kdznbto71dls7fv2e43rovxpay6lmwp2.apps.googleusercontent.com"
        clientSecret: "T19LiivOJ21QbxJvLHdFpMOx"
        ignoredDomains: []
    service:
      type: ClusterIP
    terminationGracePeriodSeconds: {}
    frontend:
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      # tag: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
      resources: {}
      # Example of well_known configuration for Apple App Site Association
      # well_known:
      #   apple_app_site_association: |
      #     {
      #       "applinks": {
      #         "apps": [],
      #         "details": [
      #           {
      #             "appID": "APP_ID",
      #             "paths": [
      #                 "/*"
      #             ]
      #           }
      #         ]
      #       }
      #     }
      #   assetlinks_json: |
      #     [
      #       {
      #         "relation": ["delegate_permission/common.handle_all_urls"],
      #         "target": {
      #           "namespace": "android_app",
      #           "package_name": "package_name",
      #           "sha256_cert_fingerprints": [
      #             "sha256_cert_fingerprints"
      #           ]
      #         }
      #       }
      #     ]
      # resources:
      #   limits:
      #     memory: 600Mi
      #   requests:
      #     cpu: 50m
      #     memory: 100Mi
    realtime:
      pullPolicy: Always
      # Log level configuration. Possible values: debug, info, warning, error
      #log_level: info
      # Overrides the image tag whose default is the chart appVersion.
      # tag: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources: {}
      # Example of Redis pool configuration (commented out by default)
      # config:
      #   redis:
      #     pool:
      #       max: 200
      #       idle: 30000
      serviceAccount:
        # Specifies whether a service account should be created
        create: true
        # Annotations to add to the service account
        annotations: {}
        # The name of the service account to use.
        # If not set and create is true, a name is generated using the fullname template
        name: ""
    server:
      persistantVolumeClaimName: "server-pvc"
      persistantVolumeClaimCreate: true
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      # tag: ""
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
      autoscaling:
        enabled: true
        minReplicas: 2
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      resources: {}
      # resources:
      #   limits:
      #     memory: 500Mi
      #   requests:
      #     cpu: 100m
      #     memory: 500Mi
      config:
        db:
          pool:
            acquire: 60000
            idle: 20000
            max: 200
            min: 10
        redis:
          pool:
            min: 5
            max: 200
            idle: 30000
        scylladb:
          contactPoints: [SCYLLADB_HOST]
          localDataCenter: eu-west
          keyspace: simulator
    cron:
      app_enabled: false

    widget:
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      # tag: ""
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 2
      resources: {}
      # resources:
      #   limits:
      #     memory: 600Mi
      #   requests:
      #     cpu: 50m
      #     memory: 100Mi

    control_tasks:
      pullPolicy: IfNotPresent
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 1
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
      resources: {}
      # resources:
      #   limits:
      #     memory: 600Mi
      #   requests:
      #     cpu: 50m
      #     memory: 100Mi
      serviceAccount:
        # Specifies whether a service account should be created
        create: false
        # Annotations to add to the service account
        annotations: {}
        # The name of the service account to use.
        # If not set and create is true, a name is generated using the fullname template
        name: ""
      config:
        crons:
          actors_cleaner:
            workers_count: 3
            ttl: 0
          # Example of ScyllaDB cleaner configuration (commented out by default)
          # scylladb_cleaner:
          #   workers_count: 5
          #   tables:
          #     counters_minutes_ttl: 7776000
          #     counters_minutes_periodicity_days: 90
          #     counters_hours_ttl: 7776000
          #     counters_days_ttl: 7776000
          #     counters_uniq_minutes_ttl: 7776000
          #     counters_uniq_hours_ttl: 7776000
          # Example of GitLab saver configuration (commented out by default)
          # graph_gitlab_saver:
          #   workers_count: 5
          #   url: "https://git-dev.corezoid.com/api/v4"
          #   token: "glpat-secret"
          #   branch: "main"
          #   project_id: 1

    serviceAccount:
      # Specifies whether a service account should be created
      create: false
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    podAnnotations: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: true
    #   allowPrivilegeEscalation: false
    #   privileged: false
    #   capabilities:
    #     drop:
    #       - NET_ADMIN
    #       - SYS_ADMIN
    #       - MAC_ADMIN
    #       - SETUID
    #       - SETGID
    #       - FOWNER
    #       - CHOWN
    #       - MKNOD


    ingress:
      enabled: true
      className: "internal-nginx"
      annotations: {}

    nodeSelector: {}

    tolerations: []

    affinity: {}
    # affinity:
    #   nodeAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       nodeSelectorTerms:
    #         - matchExpressions:
    #             - key: eks.amazonaws.com/nodegroup
    #               operator: In
    #               values:
    #                 - control-1
    opentelemetry:
      enabled: false
      tracing:
        enabled: false
        serverAddress: ''

  sa:
    subDomain: "account.corezoid.local"
    config:
      # Bearer token from single-account.conf file
      admin_bearer_token_secret: "aogeungoh3mohM3valu6Zu1ohdiighie1EemoophaequohMoovuanoJ3OhguKeiG"
