{{- $global := .Values.global }}
{{- $control_data := $global.control }}
{{- $control_server_data := $control_data.server.config }}
{{- $cfg := .Values.global.control.server.config }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-configmap
  labels:
{{- include "server.labels" . | nindent 4 }}
data:
  control.yml: |
    port: {{ include "server.port" . }} # Application port
    apiVersion: "{{ .Values.global.control.apiVersion }}" # API version
    apiSecret: {{ .Values.global.control.apiSecret }} # Secret for submitting requests between Control applications.
    superAdminApiKey: {{ .Values.global.control.superAdminApiKey }} # Superadmin API key
    superAdminApiKeyPrifix: {{ .Values.global.control.superAdminApiKeyPrifix | default "mst_" }} # Prefix for Admin key
    enableAPI: ${ENABLE_API} # Enable api mode
    enableCrons: false # Enable cron mode
    {{- if .Values.global.control.accountsTreeNocache }}
    accountsTree:
      nocache: true
    {{- end }}
    logLevel: {{ .Values.global.control.loglevel | default "custom" }}
    http2: {{ .Values.global.control.http2 | default false }}
    {{- if .Values.global.control.simulatorCloudUrl }}
    simulatorCloudUrl: {{ .Values.global.control.simulatorCloudUrl }}
    {{- end }}

    auth: # Auth settings via Single Account
      disablePublicApiCheck: {{ .Values.global.control.auth.disablePublicApiCheck }}
      name: {{ .Values.global.control.auth.name }}
      saSecretKey: {{ .Values.global.control.auth.key }}
      url: https://{{ .Values.global.control.auth.domain }}

    trackUrl: https://{{- include "control.Domain" . }} # Control Admin domain
    apiCorezoid: https://{{ .Values.global.control.apiCorezoidDomain }} # Corezoid Api domain
    corezoidSyncApiUrl: {{ .Values.global.control.corezoidSyncApiUrl }}

    db: # PostgreSQL settings
      mainDB: # PostgreSQL Main DB settings
        name: {{ .Values.global.db.secret.data.dbname | default "control" }}
        userName: {{ .Values.global.db.secret.data.dbuser }}
        password: {{ .Values.global.db.secret.data.dbpwd }}
        settings:
          {{- if .Values.global.db.bouncer }}
          host: {{ include "pgbouncer.service.name" . }}
          port: {{ .Values.global.db.bouncer_port }}
          {{- else }}
          host: {{ .Values.global.db.secret.data.dbhost }}
          port: {{ .Values.global.db.secret.data.dbport }}
          {{- end }}
          dialect: postgres
          logging: false
          {{- include "control.server.db.pool" . | nindent 10 }}
        {{- if .Values.global.db.secret.slave }}
        {{- if .Values.global.db.secret.slave.enabled }}
        replication:
            read:
              - host: {{ .Values.global.db.secret.data.dbslavehost }}
            write:
              - host: {{ .Values.global.db.secret.data.dbhost }}
        {{- end }}
        {{- end }}
{{- if $control_data.scylladb }}
      scylladb:

        contactPoints:
    {{- if $control_data.scylladb.internal }}
        - scylla-service
    {{- else }}
      {{- range $control_data.scylladb.contactPoints }}
        - {{ . }}
      {{- end }}
    {{- end }}
        keyspace: {{ $control_data.scylladb.keyspace }}
        localDataCenter: {{ $control_data.scylladb.localDataCenter }}
{{- end }}

    redis: # Redis cache settings
      host: {{ .Values.global.redis.secret.data.host }}
      port: {{ .Values.global.redis.secret.data.port }}
      {{- if .Values.global.redis.secret.data.password }}
      password: {{ .Values.global.redis.secret.data.password }}
      {{- end }}
      {{- if .Values.global.control.redisDb }}
      db: {{ .Values.global.control.redisDb }}
      {{- end }}
      pool:
        min: 2
        max: 50
        idle: 30000

    redisPubSub: # Redis PubSub settings for Real-Time
      host: {{ .Values.global.redis.secret.data.host }}
      port: {{ .Values.global.redis.secret.data.port}}
      {{- if .Values.global.redis.secret.data.password }}
      password: {{ .Values.global.redis.secret.data.password }}
      {{- end }}
      {{- if .Values.global.control.redisDb }}
      db: {{ .Values.global.control.redisDb }}
      {{- end }}
      pool:
        min: 2
        max: 50
        idle: 30000

    corezoid: # Corezoid processes settings
      processes:
        sendEmail: # Corezoid process for send email
          directUrl: {{ .Values.global.control.corezoid.processes.sendEmail.directUrl }}
        accRegistrations: # Corezoid process for Control registrations
          directUrl: {{ .Values.global.control.corezoid.processes.accRegistrations.directUrl }}

    requestLimits:
      ip: {{ .Values.global.control.requestLimits.ip }}

    filesStorage: # Shared folder for uploaded files
      eventFiles: {{ .Values.global.control.filesStorage.eventFiles }}

    webConfig: # Client settings while startup
      avatarPath: https://{{ .Values.global.control.auth.domain }}/avatars/52x52/{userId}.jpg # Avatar regexp
      systemUserAvatar: https://{{- include "control.Domain" . }}/static/systemUserAvatar.svg # System super avatar
      adminCorezoid: https://{{ .Values.global.control.adminCorezoidDomain }} # Corezoid Admin domain
      widgetUrl: https://{{- include "control.WidgetDomain" . }} # Control widget host
      supportEmail: {{ .Values.global.control.webConfig.supportEmail }} # Email for support
      realtimeApi: wss://{{- include "control.Domain" . }} # Control-realtime host
      apiDoc: https://{{- include "control.Domain" . }}/api.html # API doc host
      maxFileSize: {{ .Values.global.control.webConfig.maxFileSize }} # Max filesize
      {{- if .Values.global.control.webConfig.controlWidgetId }}
      controlWidgetId: {{ .Values.global.control.webConfig.controlWidgetId }}
      {{- end }}
      {{- if .Values.global.control.webConfig.googleAnalytics }}
      googleAnalytics: {{ .Values.global.control.webConfig.googleAnalytics }}
      {{- end }}
      {{- if .Values.global.control.webConfig.fileMimeTypes }}
      fileMimeTypes: {{ .Values.global.control.webConfig.fileMimeTypes }}
      {{- end }}
      {{- if .Values.global.control.webConfig.linkedInPartnerId }}
      linkedInPartnerId: {{ .Values.global.control.webConfig.linkedInPartnerId }}
      {{- end }}
      {{- if .Values.global.control.webConfig.metaPixelId }}
      metaPixelId: {{ .Values.global.control.webConfig.metaPixelId }}
      {{- end }}
      {{- if .Values.global.control.webConfig.apiGateway }}
      apiGateway:
        ref: {{ .Values.global.control.webConfig.apiGateway.ref }}
        workspaceId: {{ .Values.global.control.webConfig.apiGateway.workspaceId }}
      {{- end }}
      {{- if .Values.global.control.webConfig.gtagAnalytics }}
      gtagAnalytics: {{ .Values.global.control.webConfig.gtagAnalytics }}
      {{- end }}
      {{- if .Values.global.control.webConfig.scriptPath }}
      scriptPath: {{ .Values.global.control.webConfig.scriptPath }}
      {{- end }}
      {{- if .Values.global.control.webConfig.hotjar }}
      hotjar:
        hjid: {{ .Values.global.control.webConfig.hotjar.hjid }}
        hjsv: {{ .Values.global.control.webConfig.hotjar.hjsv }}
      {{- end }}
    {{- if .Values.global.control.opentelemetry.enabled }}
    {{- if .Values.global.control.opentelemetry.tracing }}
    tracing:
      enable: {{ .Values.global.control.opentelemetry.tracing.enabled | default false }}
      serverAddress: {{ .Values.global.control.opentelemetry.tracing.serverAddress }}
    {{- end }}
    {{- if .Values.global.control.opentelemetry.profiling }}
    {{- if .Values.global.control.opentelemetry.profiling.enabled }}
    profiling:
      pyroscope:
        serverAddress: {{ .Values.global.control.opentelemetry.profiling.pyroscope.serverAddress }}
        appName: control-server
    {{- end }}
    {{- end }}
    {{- end }}