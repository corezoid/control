apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-nginx-configmap
  labels:
{{- include "widget.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user  nginx;
    worker_processes 1;
    error_log /dev/stdout;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  32000;
        multi_accept on;
    }

    http {
        client_max_body_size 25m;
        server_names_hash_bucket_size 128;
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        log_format up_log '$server_addr\t$server_port\t$http_x_forwarded_for\t$time_iso8601\tforward-to $upstream_addr\t$request\t$status\t$body_bytes_sent\t$request_time\t$upstream_response_time\t$http_referer\t$http_user_agent\t$host';
        access_log /dev/stdout up_log;

        sendfile        on;
        tcp_nopush     on;

        server_tokens   off;
        # disable buffering
        proxy_buffering off;
        proxy_max_temp_file_size 0;
        keepalive_timeout  65;
        gzip on;
        gzip_types text/css application/x-javascript text/xml application/xml application/xml+rss text/plain application/javascript text/javascript application/json image/png image/svg+xml;
        gzip_proxied any;
        include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-site-configmap
  labels:
{{- include "widget.labels" . | nindent 4 }}
data:
  control_{{ .Values.appName }}.conf: |
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    server {
      listen {{ .Values.global.control.widgetPort }};
      {{ if .Values.global.control.apiOld -}}
      {{- if .Values.global.control.apiOld.enabled -}}
      server_name {{ template "control.WidgetDomain" . }} {{ .Values.global.control.widgetSubDomain | default "widget" }}.{{ .Values.global.control.apiOld.mainDomain }};
      {{- else -}}
      server_name {{ template "control.WidgetDomain" . }};
      {{- end -}}
      {{- else -}}
      server_name {{ template "control.WidgetDomain" . }};
      {{- end }}

      access_log /dev/stdout up_log;
      error_log  /dev/stdout;

      {{ include "control.nginx.add_header" . | nindent 6 }}

      resolver kube-dns.kube-system.svc.cluster.local valid=10s;

      {{- if .Values.global.control.filesStorage.type }}
      {{- if eq .Values.global.control.filesStorage.type "s3" }}
      set $bucket "{{ .Values.global.control.filesStorage.bucket }}.s3-{{ .Values.global.control.filesStorage.region }}.amazonaws.com";

      location ~ ^/v/1.0/download/(.*)$ {
        add_header Content-disposition "inline";
        client_max_body_size {{ include "control.frontend.nginx.client_max_body_size" . }};
        resolver 8.8.8.8;
        proxy_http_version     1.1;
        proxy_redirect off;
        proxy_set_header       Authorization '';
        proxy_set_header       Host $bucket;
        proxy_set_header       X-Real-IP $remote_addr;
        proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header      x-amz-id-2;
        proxy_hide_header      x-amz-request-id;
        proxy_hide_header      x-amz-meta-server-side-encryption;
        proxy_hide_header      x-amz-server-side-encryption;
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   Set-Cookie;
        proxy_intercept_errors on;
        add_header             Cache-Control max-age=31536000;
        proxy_pass             https://$bucket/$1;
      }
      {{- end }}
      {{- end }}

      location ~ ^/api/(.*) {
        proxy_pass http://server-service.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.control.serverPort }}/api/$1$is_args$args;
      }

      location = /realtime {
        proxy_pass https://{{ template "control.Domain" . }}/ws;
        # proxy_pass http://realtime-service.{{ .Release.Namespace }}.svc.cluster.local:{{ include "control.realtime.app_port" . }}/ws;
        proxy_ignore_client_abort on;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_read_timeout 60;
        keepalive_timeout 120;
      }

      charset utf-8;
      location ~ ^/(.*) {

        set $url_full         '$1';

        # Security
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        {{ include "control.nginx.add_header" . | nindent 8 }}

        if ($url_full ~ ^(\/+)?(shim\.js|launcher\.html|messenger\.html|redirect\.html)(\/+)?$) {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          {{ include "control.nginx.add_header.cors" . | nindent 10 }}
          expires modified -1;
        }

        expires modified +24h;

        gzip_static on;
        root /usr/share/nginx/html;
        try_files $uri /index.html;

      }
    }
