apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-nginx-configmap
  labels:
{{- include "widget.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user  nginx;
    worker_processes 1;
    error_log /dev/stdout;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  512000;
        multi_accept on;
    }

    http {
        client_max_body_size 25m;
        server_names_hash_bucket_size 128;
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        log_format up_log '$server_addr\t$server_port\t$http_x_forwarded_for\t$time_iso8601\tforward-to $upstream_addr\t$request\t$status\t$body_bytes_sent\t$request_time\t$upstream_response_time\t$http_referer\t$http_user_agent\t$http_cookie\t$host';
        access_log /dev/stdout up_log;

        sendfile        on;
        tcp_nopush     on;

        server_tokens   off;
        # disable buffering
        proxy_buffering off;
        proxy_max_temp_file_size 0;
        keepalive_timeout  65;
        gzip on;
        gzip_types text/css application/x-javascript text/xml application/xml application/xml+rss text/plain application/javascript text/javascript application/json image/png image/svg+xml;
        gzip_proxied any;
        include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-site-configmap
  labels:
{{- include "widget.labels" . | nindent 4 }}
data:
  control_{{ .Values.appName }}.conf: |
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    server {
      listen {{ .Values.global.control.widgetPort }};
      server_name {{ template "control.WidgetDomain" . }};

      access_log /dev/stdout main;
      error_log  /dev/stdout;

      location ~ ^/api/(.*) {
        proxy_pass https://{{ template "control.Domain" . }}/api/$1$is_args$args;
      }

      location = /realtime {
        proxy_pass https://{{ template "control.Domain" . }}/ws;
        proxy_ignore_client_abort on;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_read_timeout 60;
        keepalive_timeout 120;
      }

      charset utf-8;
      location ~ ^/(.*) {

        set $url_full         '$1';

        # Security
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        if ($url_full ~ ^(\/+)?shim.js(\/+)?$) {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          expires modified -1;
        }
        if ($url_full ~ ^(\/+)?launcher.html(\/+)?$) {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          expires modified -1;
        }
        if ($url_full ~ ^(\/+)?messenger.html(\/+)?$) {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          expires modified -1;
        }
        if ($url_full ~ ^(\/+)?redirect.html(\/+)?$) {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          expires modified -1;
        }
        expires modified +24h;

        gzip_static on;
        root /usr/share/nginx/html;
        try_files $uri /index.html;

      }
    }
